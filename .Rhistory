}
return(apply(Res,1,mean)*sum(x))
}
else {
return(x)
}
}
ZImp1=Z.Imp.1(Dades)
# Per a cada i, calcula una p a l'atzar dins cada un dels altres CI-W,
# per a i l'agafa de manera que la suma sigui 1 i estigui dins el seu CI-W
Passada=function(i,Ints){
p=-1
while (p<Ints[i,1]|p>Ints[i,2]){
I=apply(Ints[,1:2],1,PSamp)
I[i]=1-sum(I[-i])
p=I[i]
}
return(I)
}
# Per a cada i aplica Passada i al final fa la mitjana
Z.Imp.1.Mult=function(x,cl=0.95){
if (length(x[x==0])>0){
Ints=CIW(x,c.l=cl)
Res=matrix(0,nrow=length(x),ncol=length(x))
for (i in 1:length(x)){
Res[,i]=Passada(i,Ints)
}
return(apply(Res,1,mean)*sum(x))
}
else {
return(x)
}
}
ZImp1=Z.Imp.1.Mult(Dades)
# Calcula una p a l'atzar dins cada un dels  CI-W
# i els normalitza perquè sumin 1 i encara pertanyin als CI-W
Presa=function(i,x,Ints){
pp=rep(-1,length(x))
while (min(pp-Ints[,1])<0 |max(pp-Ints[,2])>0 ){
pp=apply(Ints[,1:2],1,PSamp)
pp=pp/sum(pp)
}
return(pp)
}
Z.Imp.2.Mult=function(x,m,cl=0.95){
if (length(x[x==0])>0){
Ints=CIW(x,c.l=cl)
Res=matrix(0,nrow=length(x),ncol=m)
for (i in 1:m){
Res[,i]=Presa(i,x,Ints)
}
return(apply(Res,1,mean)*sum(x))
}
else {
return(x)
}
}
ZImp2=Z.Imp.2.Mult(Dades,m=dim(Dades)[2])
# Calcula una p a l'atzar dins cada un dels  CI-W
# i els normalitza perquè sumin 1 i encara pertanyin als CI-W
Presa=function(i,x,Ints){
pp=rep(-1,length(x))
while (min(pp-Ints[,1])<0 |max(pp-Ints[,2])>0 ){
pp=apply(Ints[,1:2],1,PSamp)
pp=pp/sum(pp)
}
return(pp)
}
Z.Imp.2.Mult=function(x,m,cl=0.95){
if (length(x[x==0])>0){
Ints=CIW(x,c.l=cl)
Res=matrix(0,nrow=length(x),ncol=m)
for (i in 1:m){
Res[,i]=Presa(i,x,Ints)
}
return(apply(Res,1,mean)*sum(x))
}
else {
return(x)
}
}
ZImp2=Z.Imp.2.Mult(Dades[1:10,],m=dim(Dades[1:10,])[2])
# Calcula una p a l'atzar dins cada un dels  CI-W
# i els normalitza perquè sumin 1 i encara pertanyin als CI-W
Presa=function(i,x,Ints){
pp=rep(-1,length(x))
while (min(pp-Ints[,1])<0 |max(pp-Ints[,2])>0 ){
pp=apply(Ints[,1:2],1,PSamp)
pp=pp/sum(pp)
}
return(pp)
}
Z.Imp.2.Mult=function(x,m,cl=0.95){
if (length(x[x==0])>0){
Ints=CIW(x,c.l=cl)
Res=matrix(0,nrow=length(x),ncol=m)
for (i in 1:m){
Res[,i]=Presa(i,x,Ints)
}
return(apply(Res,1,mean)*sum(x))
}
else {
return(x)
}
}
ZImp2=Z.Imp.2.Mult(Dades[1:3,],m=dim(Dades[1:3,])[2])
# Calcula una p a l'atzar dins cada un dels  CI-W
# i els normalitza perquè sumin 1 i encara pertanyin als CI-W
Presa=function(i,x,Ints){
pp=rep(-1,length(x))
while (min(pp-Ints[,1])<0 |max(pp-Ints[,2])>0 ){
pp=apply(Ints[,1:2],1,PSamp)
pp=pp/sum(pp)
}
return(pp)
}
Z.Imp.2.Mult=function(x,m,cl=0.95){
Ints=CIW(x,c.l=cl)
Res=matrix(0,nrow=length(x),ncol=m)
for (i in 1:m){
Res[,i]=Presa(i,x,Ints)
}
return(apply(Res,1,mean)*sum(x))
}
ZImp2=Z.Imp.2.Mult(Dades[1:3,],m=dim(Dades[1:3,])[2])
x=Dades[1:3,]
cl=0.95
m=dim(Dades[1:3,])[2]
Ints=CIW(x,c.l=cl)
Res=matrix(0,nrow=length(x),ncol=m)
for (i in 1:m){
Res[,i]=Presa(i,x,Ints)
}
Ints
CIW=function(DF,c.l=0.95){
n.samp=dim(DF)[1]
N=rowSums(DF)
L=matrix(0,dim(DF)[2],dim(DF)[1])
U=matrix(0,dim(DF)[2],dim(DF)[1])
for (i in 1:dim(DF)[1]){
x=DF[i,]
x.neq.0=x[x!=0]
n0=length(x.neq.0)
LL=rep(0,dim(DF)[2])
UU=rep(0,dim(DF)[2])
for (j in 1:dim(DF)[2]){
if(DF[i,j]==0){
CI=as.matrix(epitools::binom.exact(DF[i,j],sum(x),conf.level=c.l^(1/n.samp)))[1,4:5]
LL[j]=CI[1]
UU[j]=CI[2]
}
else{
quant=ceiling(10*length(x.neq.0[x.neq.0<=DF[i,j]])/n0)
CI=as.matrix(epitools::binom.wilson(DF[i,j],sum(x),conf.level=c.l^(2*quant/n.samp)))[1,4:5]
LL[j]=CI[1]
UU[j]=CI[2]
}
}
L[,i]=LL
U[,i]=UU
}
Lower=apply(as.matrix(L),1,max)
Upper=apply(as.matrix(U),1,min)
return(cbind(lower=Lower,upper=Upper))
}
Ints=CIW(Dades)
# Per a cada i, calcula una p a l'atzar dins cada un dels altres CI-W,
# per a i l'agafa de manera que la suma sigui 1 i estigui dins el seu CI-W
Passada=function(i,II){
p=-1
while (p<II[i,1]|p>II[i,2]){
I=apply(II[,1:2],1,PSamp)
I[i]=1-sum(I[-i])
p=I[i]
}
return(I)
}
# Per a cada i aplica Passada i al final fa la mitjana
Z.Imp.1.Mult=function(DF,cl=0.95){
Ints=CIW(DF)
Res=matrix(0,nrow=dim(DF)[1],ncol=dim(DF)[2])
for (i in 1:dim(DF)[1]){
x=DF[i,]
if (length(x[x==0])>0){
ResLoc=matrix(0,nrow=length(x),ncol=length(x))
for (i in 1:length(x)){
ResLoc[,i]=Passada(i,Ints)
}
Res[i,]=apply(ResLoc,1,mean)*sum(x))
# Per a cada i, calcula una p a l'atzar dins cada un dels altres CI-W,
# per a i l'agafa de manera que la suma sigui 1 i estigui dins el seu CI-W
Passada=function(i,II){
p=-1
while (p<II[i,1]|p>II[i,2]){
I=apply(II[,1:2],1,PSamp)
I[i]=1-sum(I[-i])
p=I[i]
}
return(I)
}
# Per a cada i aplica Passada i al final fa la mitjana
Z.Imp.1.Mult=function(DF,cl=0.95){
Ints=CIW(DF)
Res=matrix(0,nrow=dim(DF)[1],ncol=dim(DF)[2])
for (i in 1:dim(DF)[1]){
x=DF[i,]
if (length(x[x==0])>0){
ResLoc=matrix(0,nrow=length(x),ncol=length(x))
for (i in 1:length(x)){
ResLoc[,i]=Passada(i,Ints)
}
Res[i,]=apply(ResLoc,1,mean)*sum(x)
}
else {
Res[i,]=x
}
}
}
ZImp1=Z.Imp.1.Mult(DF[1:3])
# Per a cada i, calcula una p a l'atzar dins cada un dels altres CI-W,
# per a i l'agafa de manera que la suma sigui 1 i estigui dins el seu CI-W
Passada=function(i,II){
p=-1
while (p<II[i,1]|p>II[i,2]){
I=apply(II[,1:2],1,PSamp)
I[i]=1-sum(I[-i])
p=I[i]
}
return(I)
}
# Per a cada i aplica Passada i al final fa la mitjana
Z.Imp.1.Mult=function(DF,cl=0.95){
Ints=CIW(DF)
Res=matrix(0,nrow=dim(DF)[1],ncol=dim(DF)[2])
for (i in 1:dim(DF)[1]){
x=DF[i,]
if (length(x[x==0])>0){
ResLoc=matrix(0,nrow=length(x),ncol=length(x))
for (i in 1:length(x)){
ResLoc[,i]=Passada(i,Ints)
}
Res[i,]=apply(ResLoc,1,mean)*sum(x)
}
else {
Res[i,]=x
}
}
}
ZImp1=Z.Imp.1.Mult(Dades[1:3])
DF=Dades[1:3]
Ints=CIW(DF)
Res=matrix(0,nrow=dim(DF)[1],ncol=dim(DF)[2])
for (i in 1:dim(DF)[1]){
x=DF[i,]
if (length(x[x==0])>0){
ResLoc=matrix(0,nrow=length(x),ncol=length(x))
for (i in 1:length(x)){
ResLoc[,i]=Passada(i,Ints)
}
Res[i,]=apply(ResLoc,1,mean)*sum(x)
}
else {
Res[i,]=x
}
}
Ints
DF=Dades[1:3,]
Ints=CIW(DF)
Res=matrix(0,nrow=dim(DF)[1],ncol=dim(DF)[2])
for (i in 1:dim(DF)[1]){
x=DF[i,]
if (length(x[x==0])>0){
ResLoc=matrix(0,nrow=length(x),ncol=length(x))
for (i in 1:length(x)){
ResLoc[,i]=Passada(i,Ints)
}
Res[i,]=apply(ResLoc,1,mean)*sum(x)
}
else {
Res[i,]=x
}
}
i=1
x=DF[i,]
length(x[x==0])>0
ResLoc=matrix(0,nrow=length(x),ncol=length(x))
for (i in 1:length(x)){
ResLoc[,i]=Passada(i,Ints)
}
Ints
Ints=CIW(Dades)
DF=Dades
Ints[,3]=Ints[,2]-Ints[,1]
Ints=c(Ints,Ints[,2]-Ints[,1])
which(Ints[,3]<0)
which(Ints[,3]<0)
head(Ints)
Ints=CIW(Dades)
Ints=c(Ints,Ints[,2]-Ints[,1])
head(Ints)
Dades=as.data.frame(read.csv("DatosA.csv"))
CIW=function(DF,c.l=0.95){
n.samp=dim(DF)[1]
N=rowSums(DF)
L=matrix(0,dim(DF)[2],dim(DF)[1])
U=matrix(0,dim(DF)[2],dim(DF)[1])
for (i in 1:dim(DF)[1]){
x=DF[i,]
x.neq.0=x[x!=0]
n0=length(x.neq.0)
LL=rep(0,dim(DF)[2])
UU=rep(0,dim(DF)[2])
for (j in 1:dim(DF)[2]){
if(DF[i,j]==0){
CI=as.matrix(epitools::binom.exact(DF[i,j],sum(x),conf.level=c.l^(1/n.samp)))[1,4:5]
LL[j]=CI[1]
UU[j]=CI[2]
}
else{
quant=ceiling(10*length(x.neq.0[x.neq.0<=DF[i,j]])/n0)
CI=as.matrix(epitools::binom.wilson(DF[i,j],sum(x),conf.level=c.l^(2*quant/n.samp)))[1,4:5]
LL[j]=CI[1]
UU[j]=CI[2]
}
}
L[,i]=LL
U[,i]=UU
}
Lower=apply(as.matrix(L),1,max)
Upper=apply(as.matrix(U),1,min)
return(cbind(lower=Lower,upper=Upper))
}
Ints=CIW(Dades)
head(Ints)
Dades=as.data.frame(read.csv("DatosA.csv"))
str(Dades)
DF=Dades
n.samp=dim(DF)[1]
N=rowSums(DF)
L=matrix(0,dim(DF)[2],dim(DF)[1])
U=matrix(0,dim(DF)[2],dim(DF)[1])
n.samp=dim(DF)[1]
N=rowSums(DF)
L=matrix(0,dim(DF)[2],dim(DF)[1])
U=matrix(0,dim(DF)[2],dim(DF)[1])
for (i in 1:dim(DF)[1]){
x=DF[i,]
x.neq.0=x[x!=0]
n0=length(x.neq.0)
LL=rep(0,dim(DF)[2])
UU=rep(0,dim(DF)[2])
for (j in 1:dim(DF)[2]){
if(DF[i,j]==0){
CI=as.matrix(epitools::binom.exact(DF[i,j],sum(x),conf.level=c.l^(1/n.samp)))[1,4:5]
}
else{
quant=ceiling(10*length(x.neq.0[x.neq.0<=DF[i,j]])/n0)
CI=as.matrix(epitools::binom.wilson(DF[i,j],sum(x),conf.level=c.l^(2*quant/n.samp)))[1,4:5]
}
LL[j]=CI[1]
UU[j]=CI[2]
}
L[,i]=LL
U[,i]=UU
}
str(L)
Lower=apply(L,1,max)
Upper=apply(U,1,min)
Fiff=Upper-Lower
which(Fiff<0)
Diff=Upper-Lower
Ints=cbind(Lowwer,Upper,Diff)
Ints=cbind(Lower,Upper,Diff)
Ints[9,]
L[9,]
which(L[9,]==max(L[9,]))
U[9,]
which(U[9,]==min(U[9,]))
L[9,22]
Dades[,9]
Dades[22,9]
Dades[4,]
install.packages("meta")
knitr::opts_chunk$set(
fig.width=8,
out.width="75%",
fig.asp = 1,
fig.align="center",
echo = TRUE,
message = FALSE,
warning = FALSE,
hiline = TRUE,
cache=TRUE
)
rm(list = ls())
set.seed(1)
#
library(epitools)
library(kableExtra)
library(meta)
#
EG=c(12 ,15 ,803 ,1276 ,183 ,10 ,279 ,3124 ,22 ,5 ,23 ,47 ,472 ,29 ,18 ,198 ,14 ,10 ,0 ,3 ,2 ,1 ,0 ,42 ,37 ,0 ,0 ,1 ,8 ,170 ,12 ,116 ,6 ,4 ,32 ,3 ,1 ,13 ,29 ,71 ,134 ,24 ,3 ,23 ,16 ,8 ,5 ,26 ,48 ,1 ,8 ,7 ,21 ,12 ,17 ,64 ,6 ,7 ,7 ,155 ,40 ,3 ,32 ,135 ,58 ,119 ,1 ,18 ,5 ,3 ,227 ,107 ,232 ,48 ,519 ,398 ,646 ,543 ,87 ,15 ,5 ,49 ,80 ,45 ,1108 ,226 ,4 ,22 ,0 ,0 ,0 ,1 ,564 ,4 ,0 ,8 ,0 ,2 ,0 ,0 ,64 ,36 ,17 ,66 ,28 ,17 ,44 ,135 ,56 ,250 ,44 ,2 ,6 ,86 ,14 ,9 ,581 ,4 ,103 ,0 ,80 ,204 ,28 ,43 ,0 ,891 ,77 ,96 ,11 ,15 ,8 ,79 ,48 ,375 ,220 ,620 ,87 ,173 ,49 ,4038 ,521 ,831 ,476 ,422 ,40 ,0 ,1 ,52 ,64 ,51 ,42 ,226 ,75 ,276 ,493 ,8911 ,85 ,3 ,1 ,12 ,35 ,128 ,671 ,0 ,549 ,203 ,0 ,568 ,3 ,173 ,37 ,907 ,2 ,12 ,214 ,53 ,21 ,0 ,2 ,0 ,0 ,1 ,1 ,0 ,0 ,55 ,34 ,21 ,222 ,17902 ,145 ,1 ,113 ,3 ,78 ,37 ,242 ,10 ,1 ,0 ,155 ,1258 ,64 ,1343 ,0 ,268 ,75 ,234 ,2860 ,589 ,20 ,49 ,353 ,919 ,5 ,26 ,47 ,54)
Dades=as.data.frame(read.csv("DatosA.csv")) # Fileres: mostres; Columnes: OTU
rm(list = ls())
set.seed(1)
#
library(epitools)
library(kableExtra)
library(meta)
#
EG=c(12 ,15 ,803 ,1276 ,183 ,10 ,279 ,3124 ,22 ,5 ,23 ,47 ,472 ,29 ,18 ,198 ,14 ,10 ,0 ,3 ,2 ,1 ,0 ,42 ,37 ,0 ,0 ,1 ,8 ,170 ,12 ,116 ,6 ,4 ,32 ,3 ,1 ,13 ,29 ,71 ,134 ,24 ,3 ,23 ,16 ,8 ,5 ,26 ,48 ,1 ,8 ,7 ,21 ,12 ,17 ,64 ,6 ,7 ,7 ,155 ,40 ,3 ,32 ,135 ,58 ,119 ,1 ,18 ,5 ,3 ,227 ,107 ,232 ,48 ,519 ,398 ,646 ,543 ,87 ,15 ,5 ,49 ,80 ,45 ,1108 ,226 ,4 ,22 ,0 ,0 ,0 ,1 ,564 ,4 ,0 ,8 ,0 ,2 ,0 ,0 ,64 ,36 ,17 ,66 ,28 ,17 ,44 ,135 ,56 ,250 ,44 ,2 ,6 ,86 ,14 ,9 ,581 ,4 ,103 ,0 ,80 ,204 ,28 ,43 ,0 ,891 ,77 ,96 ,11 ,15 ,8 ,79 ,48 ,375 ,220 ,620 ,87 ,173 ,49 ,4038 ,521 ,831 ,476 ,422 ,40 ,0 ,1 ,52 ,64 ,51 ,42 ,226 ,75 ,276 ,493 ,8911 ,85 ,3 ,1 ,12 ,35 ,128 ,671 ,0 ,549 ,203 ,0 ,568 ,3 ,173 ,37 ,907 ,2 ,12 ,214 ,53 ,21 ,0 ,2 ,0 ,0 ,1 ,1 ,0 ,0 ,55 ,34 ,21 ,222 ,17902 ,145 ,1 ,113 ,3 ,78 ,37 ,242 ,10 ,1 ,0 ,155 ,1258 ,64 ,1343 ,0 ,268 ,75 ,234 ,2860 ,589 ,20 ,49 ,353 ,919 ,5 ,26 ,47 ,54)
#
EG=c(12 ,15 ,803 ,1276 ,183 ,10 ,279 ,3124 ,22 ,5 ,23 ,47 ,472 ,29 ,18 ,198 ,14 ,10 ,0 ,3 ,2 ,1 ,0 ,42 ,37 ,0 ,0 ,1 ,8 ,170 ,12 ,116 ,6 ,4 ,32 ,3 ,1 ,13 ,29 ,71 ,134 ,24 ,3 ,23 ,16 ,8 ,5 ,26 ,48 ,1 ,8 ,7 ,21 ,12 ,17 ,64 ,6 ,7 ,7 ,155 ,40 ,3 ,32 ,135 ,58 ,119 ,1 ,18 ,5 ,3 ,227 ,107 ,232 ,48 ,519 ,398 ,646 ,543 ,87 ,15 ,5 ,49 ,80 ,45 ,1108 ,226 ,4 ,22 ,0 ,0 ,0 ,1 ,564 ,4 ,0 ,8 ,0 ,2 ,0 ,0 ,64 ,36 ,17 ,66 ,28 ,17 ,44 ,135 ,56 ,250 ,44 ,2 ,6 ,86 ,14 ,9 ,581 ,4 ,103 ,0 ,80 ,204 ,28 ,43 ,0 ,891 ,77 ,96 ,11 ,15 ,8 ,79 ,48 ,375 ,220 ,620 ,87 ,173 ,49 ,4038 ,521 ,831 ,476 ,422 ,40 ,0 ,1 ,52 ,64 ,51 ,42 ,226 ,75 ,276 ,493 ,8911 ,85 ,3 ,1 ,12 ,35 ,128 ,671 ,0 ,549 ,203 ,0 ,568 ,3 ,173 ,37 ,907 ,2 ,12 ,214 ,53 ,21 ,0 ,2 ,0 ,0 ,1 ,1 ,0 ,0 ,55 ,34 ,21 ,222 ,17902 ,145 ,1 ,113 ,3 ,78 ,37 ,242 ,10 ,1 ,0 ,155 ,1258 ,64 ,1343 ,0 ,268 ,75 ,234 ,2860 ,589 ,20 ,49 ,353 ,919 ,5 ,26 ,47 ,54)
Dades=as.data.frame(read.csv("DatosA.csv")) # Fileres: mostres; Columnes: OTU
View(Dades)
rm(list = ls())
View(Dades)
Dades=as.data.frame(read.csv("DatosA.csv")) # Fileres: mostres; Columnes: OTU
DF=Dades
n.samp=dim(DF)[1]
n.otu=dim(DF)[2]
N=rowSums(DF)
meta.loc=function(i,cl=0.95){
event=DF[,i]
n=N
return(confint(metaprop(event,n,method.ci = "WS")))
}
meta.loc=function(i,cl=0.95){
event=DF[,i]
n=N
return(confint(metaprop(event,n,method.ci = "WS"),level=cl))
}
meta.loc(1)
str(metaprop(event,n,method.ci = "WS"))
meta.loc=function(i,cl=0.95){
event=DF[,i]
n=N
return(metaprop(event,n,method.ci = "WS"))
}
meta.loc(1)
str(meta.loc(1))
names(meta.loc(1))
meta.loc(1)[[53]]
meta.loc(1)$'lower random'
meta.loc(1)$lower
meta.loc(1)$lower.random
i=1
event=DF[,i]
n=N
X=meta::metaprop(event,n,method.ci = "WS")
R=c(X$lower.random,X$upper.random)
CI=meta:::backtransf(R, sm="PLOGIT")
CI
meta.loc(1)
meta::metaprop(DF[,i],N,method.ci = "WS",sm="PRAW")
metaprop(DF[,i],N,method.ci = "WS",sm="PLOGIT")
meta::metaprop(DF[,i],N,method.ci = "WS",sm="PLN")
DF=Dades[1:3]
n.samp=dim(DF)[1]
n.otu=dim(DF)[2]
N=rowSums(DF)
meta.loc=function(i,cl=0.95){
X=meta::metaprop(DF[,i],N,method.ci = "WS",sm="PLOGIT")
R=c(X$lower.random,X$upper.random)
return(meta:::backtransf(R, sm="PLOGIT"))
}
X=unlist(lapply(DF,meta.loc))
CI=matrix(0,nrow=n.otu,ncol=2)
for (i in 1:n.otu){
CI[i,]=meta.loc(i)
}
CI
attr(CI, "dimnames")=list(NULL,c("lower","upper"))
CI
DF=Dades[1:3]
CIW.glob=function(DF,c.l=0.95){
n.samp=dim(DF)[1]
n.otu=dim(DF)[2]
N=rowSums(DF)
meta.loc=function(i,cl=0.95){
X=meta::metaprop(DF[,i],N,method.ci = "WS",sm="PLOGIT")
R=c(X$lower.random,X$upper.random)
return(meta:::backtransf(R, sm="PLOGIT"))
}
CI=matrix(0,nrow=n.otu,ncol=2)
for (i in 1:n.otu){
CI[i,]=meta.loc(i)
}
attr(CI, "dimnames")=list(NULL,c("lower","upper"))
return(CI)
}
Ints=CIW(Dades[1:3])
Ints=CIW.metan(Dades[1:3])
DF=Dades[1:3]
CIW.metan=function(DF,c.l=0.95){
n.samp=dim(DF)[1]
n.otu=dim(DF)[2]
N=rowSums(DF)
meta.loc=function(i,cl=0.95){
X=meta::metaprop(DF[,i],N,method.ci = "WS",sm="PLOGIT")
R=c(X$lower.random,X$upper.random)
return(meta:::backtransf(R, sm="PLOGIT"))
}
CI=matrix(0,nrow=n.otu,ncol=2)
for (i in 1:n.otu){
CI[i,]=meta.loc(i)
}
attr(CI, "dimnames")=list(NULL,c("lower","upper"))
return(CI)
}
Ints=CIW.metan(Dades[1:3])
Ints
